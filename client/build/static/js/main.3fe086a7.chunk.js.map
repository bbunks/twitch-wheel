{"version":3,"sources":["customHooks/StickyState.js","components/Home/Home.jsx","components/Login/Login.jsx","App.jsx","serviceWorker.js","index.js"],"names":["useStickyState","defaultValue","key","useState","stickyValue","window","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","io","require","Home","props","requests","setRequests","socket","on","console","log","data","prev","map","ele","username","request","Login","App","oauthToken","setAuthenticated","className","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mSAEe,SAASA,EAAeC,EAAcC,GAAM,IAAD,EAC5BC,oBAAS,WAC/B,IAAMC,EAAcC,OAAOC,aAAaC,QAAQL,GAChD,OAAuB,OAAhBE,EAAuBI,KAAKC,MAAML,GAAeH,KAHN,mBAC/CS,EAD+C,KACxCC,EADwC,KAQtD,OAHAC,qBAAU,WACNP,OAAOC,aAAaO,QAAQX,EAAKM,KAAKM,UAAUJ,MACjD,CAACR,EAAKQ,IACF,CAACA,EAAOC,G,kBCTbI,EAAKC,EAAQ,IAgCJC,MA9Bf,SAAcC,GAAQ,IAAD,EACef,mBAAS,GAAI,YAD5B,mBACVgB,EADU,KACAC,EADA,KAgBjB,OAbAR,qBAAU,WACN,IAAMS,EAASN,IACfM,EAAOC,GAAG,WAAW,WACjBC,QAAQC,IAAI,gBAEhBH,EAAOC,GAAG,QAAQ,SAACG,GACfL,EAAYK,MAEhBJ,EAAOC,GAAG,cAAc,SAACG,GACrBL,GAAY,SAACM,GAAD,4BAAcA,GAAd,CAAoBD,YAErC,IAGC,6BACKN,EAASQ,KAAI,SAACC,GACX,OACI,6BACI,4BAAKA,EAAIC,UACT,2BAAID,EAAIE,eCGjBC,I,qBCKAC,MAzBf,WAAgB,IAAD,EACqBhC,EAAe,GAAI,YADxC,mBACJ6B,EADI,aAEyB7B,EAAe,GAAI,eAF5C,mBAEJiC,EAFI,aAG8B9B,oBAAS,IAHvC,mBAGU+B,GAHV,WAKX,OACI,kBAAC,IAAD,KACI,yBAAKC,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,WACR,4CAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,CACIF,iBAAkBA,EAClBL,SAAUA,EACVI,WAAYA,SCZpBI,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.3fe086a7.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function useStickyState(defaultValue, key) {\n    const [value, setValue] = useState(() => {\n        const stickyValue = window.localStorage.getItem(key);\n        return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n    });\n    useEffect(() => {\n        window.localStorage.setItem(key, JSON.stringify(value));\n    }, [key, value]);\n    return [value, setValue];\n}\n","import React, { useState, useEffect } from \"react\";\nconst io = require(\"socket.io-client\");\n\nfunction Home(props) {\n    const [requests, setRequests] = useState([], \"requests\");\n\n    useEffect(() => {\n        const socket = io();\n        socket.on(\"connect\", () => {\n            console.log(\"connected\");\n        });\n        socket.on(\"init\", (data) => {\n            setRequests(data);\n        });\n        socket.on(\"newRequest\", (data) => {\n            setRequests((prev) => [...prev, data]);\n        });\n    }, []);\n\n    return (\n        <div>\n            {requests.map((ele) => {\n                return (\n                    <div>\n                        <h2>{ele.username}</h2>\n                        <p>{ele.request}</p>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default Home;\n","import React from \"react\";\nimport EntryField from \"./EntryField/EntryField\";\n\nfunction Login(props) {\n    return (\n        <div>\n            <EntryField\n                label=\"Username\"\n                value={props.username}\n                onChange={props.setUsername}\n            />\n            <EntryField\n                hideChars\n                label=\"Oauth Token\"\n                value={props.oauthToken}\n                onChange={props.setOauthToken}\n            />\n            <button onClick={() => props.setAuthenticated(true)}>Login</button>\n            <p>\n                Please get a OAuth token from{\" \"}\n                <a href=\"https://twitchapps.com/tmi/\" target=\"_blank\">\n                    here\n                </a>\n            </p>\n        </div>\n    );\n}\n\nexport default Login;\n","import React, { useState, useEffect } from \"react\";\nimport useStickyState from \"./customHooks/StickyState\";\nimport \"./App.css\";\nimport Home from \"./components/Home/Home\";\nimport Login from \"./components/Login/Login\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport tmi from \"tmi.js\";\n\nfunction App() {\n    const [username, setUsername] = useStickyState([], \"username\");\n    const [oauthToken, setOauthToken] = useStickyState([], \"oauthToken\");\n    const [authenicated, setAuthenticated] = useState(false);\n\n    return (\n        <Router>\n            <div className=\"App\">\n                <Switch>\n                    <Route path=\"/viewer\">\n                        <h1>To be Built</h1>\n                    </Route>\n                    <Route path=\"/\">\n                        <Home\n                            setAuthenticated={setAuthenticated}\n                            username={username}\n                            oauthToken={oauthToken}\n                        />\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}